use revm::opcode::*;

pub const BLOCK_END_INSTRUCTIONS: [u8 ;7] = [
    STOP, //stop
    SELFDESTRUCT, // self destruct
    RETURN, // return
    REVERT, // revert
    INVALID, // invalid
    JUMP, // jump
    JUMPI, //  jumpi
];
// The index == the num of stack frames utilized by the opcodes at such index
// e.g., STACK_ARG_COUNT_MAP[0] returns all opcodes for which 0 stack elements are read
pub const STACK_ARG_COUNT_MAP: [&'static[u8]; 17] = [
    &[
        STOP, ADDRESS, ORIGIN, CALLER, CALLVALUE, CALLDATASIZE, CODESIZE, GASPRICE, RETURNDATASIZE,
        COINBASE, TIMESTAMP, NUMBER, DIFFICULTY, GASLIMIT, CHAINID, SELFBALANCE, BASEFEE,
        PC, MSIZE, GAS, JUMPDEST, PUSH1, PUSH2, PUSH3, PUSH4, PUSH5, PUSH6, PUSH7,
        PUSH8, PUSH9, PUSH10, PUSH11, PUSH12, PUSH13, PUSH14, PUSH15, PUSH16,
        PUSH17, PUSH18, PUSH19, PUSH20, PUSH21, PUSH22, PUSH23, PUSH24, PUSH25, PUSH26,
        PUSH27, PUSH28,PUSH29, PUSH30, PUSH31, PUSH32, INVALID,
    ],
    &[
        ISZERO, NOT, BALANCE, CALLDATALOAD, EXTCODESIZE, EXTCODEHASH, BLOCKHASH, POP,
        MLOAD, SLOAD, JUMP, DUP1, SWAP1, SELFDESTRUCT
    ],
    &[
        ADD, MUL, SUB, DIV, SDIV, MOD, SMOD, SIGNEXTEND, LT, GT, SLT, SGT, EQ, AND,OR,XOR,
        BYTE, SHL, SHR, SAR, SHA3, MSTORE, MSTORE8, SSTORE, JUMPI, DUP2, SWAP2,LOG0,RETURN,
        REVERT, EXP
    ],
    &[DUP3, SWAP3,LOG1, CREATE, ADDMOD, MULMOD, CALLDATACOPY, RETURNDATACOPY, CODECOPY],
    &[DUP4, SWAP4,LOG2, CREATE2, EXTCODECOPY],
    &[DUP5, SWAP5, LOG3],
    &[DUP6, SWAP6, LOG4, DELEGATECALL, STATICCALL],
    &[DUP7, SWAP7, CALL, CALLCODE],
    &[DUP8, SWAP8],
    &[DUP9, SWAP9],
    &[DUP10, SWAP10],
    &[DUP11, SWAP11],
    &[DUP12, SWAP12],
    &[DUP13, SWAP13],
    &[DUP14, SWAP14],
    &[DUP15, SWAP15],
    &[DUP16, SWAP16],
];

// The amount of stack args used by this opcode
pub const OPCODE_STACK_ARG_DEPTH: [Option<u8>; 256] = [
    /* 0x00 */ Some(0),
    /* 0x01 */ Some(2),
    /* 0x02 */ Some(2),
    /* 0x03 */ Some(2),
    /* 0x04 */ Some(2),
    /* 0x05 */ Some(2),
    /* 0x06 */ Some(2),
    /* 0x07 */ Some(2),
    /* 0x08 */ Some(3),
    /* 0x09 */ Some(3),
    /* 0x0a */ Some(2),
    /* 0x0b */ Some(2),
    /* 0x0c */ None,
    /* 0x0d */ None,
    /* 0x0e */ None,
    /* 0x0f */ None,
    /* 0x10 */ Some(2),
    /* 0x11 */ Some(2),
    /* 0x12 */ Some(2),
    /* 0x13 */ Some(2),
    /* 0x14 */ Some(2),
    /* 0x15 */ Some(1),
    /* 0x16 */ Some(2),
    /* 0x17 */ Some(2),
    /* 0x18 */ Some(2),
    /* 0x19 */ Some(1),
    /* 0x1a */ Some(2),
    /* 0x1b */ Some(2),
    /* 0x1c */ Some(2),
    /* 0x1d */ Some(2),
    /* 0x1e */ None,
    /* 0x1f */ None,
    /* 0x20 */ Some(2),
    /* 0x21 */ None,
    /* 0x22 */ None,
    /* 0x23 */ None,
    /* 0x24 */ None,
    /* 0x25 */ None,
    /* 0x26 */ None,
    /* 0x27 */ None,
    /* 0x28 */ None,
    /* 0x29 */ None,
    /* 0x2a */ None,
    /* 0x2b */ None,
    /* 0x2c */ None,
    /* 0x2d */ None,
    /* 0x2e */ None,
    /* 0x2f */ None,
    /* 0x30 */ Some(0),
    /* 0x31 */ Some(1),
    /* 0x32 */ Some(0),
    /* 0x33 */ Some(0),
    /* 0x34 */ Some(0),
    /* 0x35 */ Some(1),
    /* 0x36 */ Some(0),
    /* 0x37 */ Some(3),
    /* 0x38 */ Some(0),
    /* 0x39 */ Some(3),
    /* 0x3a */ Some(0),
    /* 0x3b */ Some(1),
    /* 0x3c */ Some(4),
    /* 0x3d */ Some(0),
    /* 0x3e */ Some(3),
    /* 0x3f */ Some(1),
    /* 0x40 */ Some(1),
    /* 0x41 */ Some(0),
    /* 0x42 */ Some(0),
    /* 0x43 */ Some(0),
    /* 0x44 */ Some(0),
    /* 0x45 */ Some(0),
    /* 0x46 */ Some(0),
    /* 0x47 */ Some(0),
    /* 0x48 */ Some(0),
    /* 0x49 */ None,
    /* 0x4a */ None,
    /* 0x4b */ None,
    /* 0x4c */ None,
    /* 0x4d */ None,
    /* 0x4e */ None,
    /* 0x4f */ None,
    /* 0x50 */ Some(1),
    /* 0x51 */ Some(1),
    /* 0x52 */ Some(2),
    /* 0x53 */ Some(2),
    /* 0x54 */ Some(2),
    /* 0x55 */ Some(2),
    /* 0x56 */ Some(1),
    /* 0x57 */ Some(2),
    /* 0x58 */ Some(0),
    /* 0x59 */ Some(0),
    /* 0x5a */ Some(0),
    /* 0x5b */ Some(0),
    /* 0x5c */ None,
    /* 0x5d */ None,
    /* 0x5e */ None,
    /* 0x5f */ None,
    /* 0x60 */ Some(0),
    /* 0x61 */ Some(0),
    /* 0x62 */ Some(0),
    /* 0x63 */ Some(0),
    /* 0x64 */ Some(0),
    /* 0x65 */ Some(0),
    /* 0x66 */ Some(0),
    /* 0x67 */ Some(0),
    /* 0x68 */ Some(0),
    /* 0x69 */ Some(0),
    /* 0x6a */ Some(0),
    /* 0x6b */ Some(0),
    /* 0x6c */ Some(0),
    /* 0x6d */ Some(0),
    /* 0x6e */ Some(0),
    /* 0x6f */ Some(0),
    /* 0x70 */ Some(0),
    /* 0x71 */ Some(0),
    /* 0x72 */ Some(0),
    /* 0x73 */ Some(0),
    /* 0x74 */ Some(0),
    /* 0x75 */ Some(0),
    /* 0x76 */ Some(0),
    /* 0x77 */ Some(0),
    /* 0x78 */ Some(0),
    /* 0x79 */ Some(0),
    /* 0x7a */ Some(0),
    /* 0x7b */ Some(0),
    /* 0x7c */ Some(0),
    /* 0x7d */ Some(0),
    /* 0x7e */ Some(0),
    /* 0x7f */ Some(0),
    /* 0x80 */ Some(1),
    /* 0x81 */ Some(2),
    /* 0x82 */ Some(3),
    /* 0x83 */ Some(4),
    /* 0x84 */ Some(5),
    /* 0x85 */ Some(6),
    /* 0x86 */ Some(7),
    /* 0x87 */ Some(8),
    /* 0x88 */ Some(9),
    /* 0x89 */ Some(10),
    /* 0x8a */ Some(11),
    /* 0x8b */ Some(12),
    /* 0x8c */ Some(13),
    /* 0x8d */ Some(14),
    /* 0x8e */ Some(15),
    /* 0x8f */ Some(16),
    /* 0x90 */ Some(1),
    /* 0x91 */ Some(2),
    /* 0x92 */ Some(3),
    /* 0x93 */ Some(4),
    /* 0x94 */ Some(5),
    /* 0x95 */ Some(6),
    /* 0x96 */ Some(7),
    /* 0x97 */ Some(8),
    /* 0x98 */ Some(9),
    /* 0x99 */ Some(10),
    /* 0x9a */ Some(11),
    /* 0x9b */ Some(12),
    /* 0x9c */ Some(13),
    /* 0x9d */ Some(14),
    /* 0x9e */ Some(15),
    /* 0x9f */ Some(16),
    /* 0xa0 */ Some(2),
    /* 0xa1 */ Some(3),
    /* 0xa2 */ Some(4),
    /* 0xa3 */ Some(5),
    /* 0xa4 */ Some(6),
    /* 0xa5 */ None,
    /* 0xa6 */ None,
    /* 0xa7 */ None,
    /* 0xa8 */ None,
    /* 0xa9 */ None,
    /* 0xaa */ None,
    /* 0xab */ None,
    /* 0xac */ None,
    /* 0xad */ None,
    /* 0xae */ None,
    /* 0xaf */ None,
    /* 0xb0 */ None,
    /* 0xb1 */ None,
    /* 0xb2 */ None,
    /* 0xb3 */ None,
    /* 0xb4 */ None,
    /* 0xb5 */ None,
    /* 0xb6 */ None,
    /* 0xb7 */ None,
    /* 0xb8 */ None,
    /* 0xb9 */ None,
    /* 0xba */ None,
    /* 0xbb */ None,
    /* 0xbc */ None,
    /* 0xbd */ None,
    /* 0xbe */ None,
    /* 0xbf */ None,
    /* 0xc0 */ None,
    /* 0xc1 */ None,
    /* 0xc2 */ None,
    /* 0xc3 */ None,
    /* 0xc4 */ None,
    /* 0xc5 */ None,
    /* 0xc6 */ None,
    /* 0xc7 */ None,
    /* 0xc8 */ None,
    /* 0xc9 */ None,
    /* 0xca */ None,
    /* 0xcb */ None,
    /* 0xcc */ None,
    /* 0xcd */ None,
    /* 0xce */ None,
    /* 0xcf */ None,
    /* 0xd0 */ None,
    /* 0xd1 */ None,
    /* 0xd2 */ None,
    /* 0xd3 */ None,
    /* 0xd4 */ None,
    /* 0xd5 */ None,
    /* 0xd6 */ None,
    /* 0xd7 */ None,
    /* 0xd8 */ None,
    /* 0xd9 */ None,
    /* 0xda */ None,
    /* 0xdb */ None,
    /* 0xdc */ None,
    /* 0xdd */ None,
    /* 0xde */ None,
    /* 0xdf */ None,
    /* 0xe0 */ None,
    /* 0xe1 */ None,
    /* 0xe2 */ None,
    /* 0xe3 */ None,
    /* 0xe4 */ None,
    /* 0xe5 */ None,
    /* 0xe6 */ None,
    /* 0xe7 */ None,
    /* 0xe8 */ None,
    /* 0xe9 */ None,
    /* 0xea */ None,
    /* 0xeb */ None,
    /* 0xec */ None,
    /* 0xed */ None,
    /* 0xee */ None,
    /* 0xef */ None,
    /* 0xf0 */ Some(3),
    /* 0xf1 */ Some(7),
    /* 0xf2 */ Some(7),
    /* 0xf3 */ Some(2),
    /* 0xf4 */ Some(6),
    /* 0xf5 */ Some(4),
    /* 0xf6 */ None,
    /* 0xf7 */ None,
    /* 0xf8 */ None,
    /* 0xf9 */ None,
    /* 0xfa */ Some(6),
    /* 0xfb */ None,
    /* 0xfc */ None,
    /* 0xfd */ Some(2),
    /* 0xfe */ Some(0),
    /* 0xff */ Some(0),
];

pub const NON_STACK_INCREASING_OPS: [u8; 36] = [
    0x5b, 0x55, 0x56, 0x57, 0x52, 0x53, 0x3e,0x3c, 0x39, 0x37, 0xf0, 0xf3,0xfd, 0xfe, 0xff,
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,0x98, 0x99,
    0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f
];